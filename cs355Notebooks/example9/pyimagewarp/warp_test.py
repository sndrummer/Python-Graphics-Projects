import cv2
import unittest
from ImgWarper import *
import numpy as np

OPENFACE_OUTPUTS = [
    171.9058638092084,
    170.6418733420462,
    173.2819168438913,
    178.8769832323965,
    190.4387429392847,
    208.992090846121,
    229.2985042529168,
    252.7022526987575,
    280.2919725987762,
    308.4561112775668,
    335.9187282881255,
    359.6791187721923,
    377.5408504013046,
    389.4019141900405,
    396.8571712744464,
    402.004520430836,
    405.1807551546782,
    191.1517712208668,
    208.0077097842049,
    227.4081638867683,
    246.0421826044534,
    263.0192268416986,
    306.0893839696733,
    325.779803813271,
    345.2636434923756,
    364.8478672555654,
    380.0334625606957,
    284.3019435538187,
    282.3367541284452,
    280.4757238800036,
    278.6688548550513,
    256.4582066652812,
    267.498334803405,
    278.6885840423415,
    291.0999656256849,
    302.7043614407651,
    214.1785412458856,
    227.0959636829287,
    242.265342511916,
    254.4264880025274,
    240.4491976941212,
    225.1708419884239,
    313.7525979669304,
    327.770710075221,
    343.016480137416,
    355.2855438313865,
    343.3895224403558,
    328.3474531795865,
    233.5963836410393,
    250.4528018880904,
    266.9085211174612,
    278.1706331375449,
    291.1725967843167,
    308.0938628666037,
    325.7898254231013,
    307.2830879370407,
    290.4599434944299,
    276.659159519554,
    264.4167202118221,
    248.6480248070091,
    240.459601497513,
    266.658810977734,
    278.1028643586124,
    291.3719054138863,
    317.8413456952541,
    290.7485911417878,
    277.4586099668841,
    265.9052184589825,
    201.5854961985201,
    235.36513264159,
    270.5116810753984,
    305.0842963160991,
    336.9858544903663,
    364.8603630005152,
    387.1305369555337,
    403.0687758035102,
    407.2458427011069,
    403.1091643882415,
    387.5803333018497,
    367.3932688465667,
    342.8274316606918,
    314.1712473882218,
    282.8745847792305,
    251.1897410177252,
    219.5686784191728,
    175.7869835372595,
    165.1187543888361,
    163.9743444120993,
    169.2862563736265,
    178.5146345979626,
    180.3755636868374,
    173.5931139214773,
    171.5732802586801,
    174.3928935932236,
    185.7419071135809,
    206.4015249382583,
    226.0235519560663,
    245.5578295630113,
    265.9530603326122,
    282.4221939436579,
    286.5729963238983,
    290.4006133667262,
    287.7406219639531,
    284.6161472057126,
    206.496382094304,
    200.6688139365546,
    202.1113406715585,
    211.4953625550573,
    214.2145274769144,
    213.1885181610568,
    215.1683569479146,
    207.3203802910246,
    208.1476763613168,
    215.4295857421528,
    220.1804329379926,
    219.6040724467201,
    320.9096281836791,
    314.8293059475643,
    311.7908922234341,
    315.3639148454012,
    313.1145219218308,
    317.7688014244685,
    324.57713544643,
    337.5134570980223,
    342.4037450481955,
    343.3727219587736,
    341.8812084847225,
    335.8843039209954,
    322.1972099617915,
    323.2420661439707,
    324.8647407838427,
    323.8714143148033,
    325.4683611505075,
    326.3568929991825,
    327.3776825845833,
    325.9344668527129
]
DESTINATIONS = [
    171.9058638092084,
    170.6418733420462,
    173.2819168438913,
    178.8769832323965,
    190.4387429392847,
    208.992090846121,
    229.2985042529168,
    252.7022526987575,
    280.2919725987762,
    308.4561112775668,
    335.9187282881255,
    359.6791187721923,
    377.5408504013046,
    389.4019141900405,
    396.8571712744464,
    402.004520430836,
    405.1807551546782,
    191.1517712208668,
    208.0077097842049,
    227.4081638867683,
    246.0421826044534,
    263.0192268416986,
    306.0893839696733,
    325.779803813271,
    345.2636434923756,
    364.8478672555654,
    380.0334625606957,
    284.3019435538187,
    282.3367541284452,
    280.4757238800036,
    278.6688548550513,
    256.4582066652812,
    267.498334803405,
    278.6885840423415,
    291.0999656256849,
    302.7043614407651,
    214.1785412458856,
    227.0959636829287,
    242.265342511916,
    254.4264880025274,
    240.4491976941212,
    225.1708419884239,
    313.7525979669304,
    327.770710075221,
    343.016480137416,
    355.2855438313865,
    343.3895224403558,
    328.3474531795865,
    233.5963836410393,
    250.4528018880904,
    266.9085211174612,
    278.1706331375449,
    291.1725967843167,
    308.0938628666037,
    325.7898254231013,
    307.2830879370407,
    290.4599434944299,
    276.659159519554,
    264.4167202118221,
    248.6480248070091,
    240.459601497513,
    266.658810977734,
    278.1028643586124,
    291.3719054138863,
    317.8413456952541,
    290.7485911417878,
    277.4586099668841,
    265.9052184589825,
    201.5854961985201,
    235.36513264159,
    270.5116810753984,
    305.0842963160991,
    336.9858544903663,
    364.8603630005152,
    387.1305369555337,
    403.0687758035102,
    407.2458427011069,
    403.1091643882415,
    387.5803333018497,
    367.3932688465667,
    342.8274316606918,
    314.1712473882218,
    282.8745847792305,
    251.1897410177252,
    219.5686784191728,
    175.7869835372595,
    165.1187543888361,
    163.9743444120993,
    169.2862563736265,
    178.5146345979626,
    180.3755636868374,
    173.5931139214773,
    171.5732802586801,
    174.3928935932236,
    185.7419071135809,
    206.4015249382583,
    226.0235519560663,
    245.5578295630113,
    265.9530603326122,
    282.4221939436579,
    286.5729963238983,
    290.4006133667262,
    287.7406219639531,
    284.6161472057126,
    206.496382094304,
    205.6688139365546,
    207.1113406715585,
    211.4953625550573,
    214.2145274769144,
    213.1885181610568,
    215.1683569479146,
    207.3203802910246,
    208.1476763613168,
    215.4295857421528,
    220.1804329379926,
    219.6040724467201,
    320.9096281836791,
    314.8293059475643,
    311.7908922234341,
    315.3639148454012,
    313.1145219218308,
    317.7688014244685,
    324.57713544643,
    337.5134570980223,
    342.4037450481955,
    343.3727219587736,
    341.8812084847225,
    335.8843039209954,
    322.1972099617915,
    323.2420661439707,
    324.8647407838427,
    323.8714143148033,
    325.4683611505075,
    326.3568929991825,
    327.3776825845833,
    325.9344668527129
]

class WarpTest(unittest.TestCase):

    def setUp(self):
        self.img = cv2.imread('test.jpg', 1)
        height, width, channels = self.img.shape
        self.new_image = np.zeros((height, width, channels), np.uint8)
        #cv2.imshow('image', self.img)
        #cv2.waitKey(0)
        #cv2.destroyAllWindows()

    def test_read_image(self):
        print(len(self.img), len(self.img[0]))
        self.assertEqual(type(self.img), 'numpy.ndarray')

    def test_create_canvas(self):
        print(self.new_image.width, self.new_image.height)
        cv2.imshow('image', self.new_image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.assertEqual(type(self.new_image), type(self.img))

    def test_draw_point(self):
        original_points = self.get_points()

        map(lambda p: cv2.circle(self.img, (int(p.x), int(p.y)), 1, (0, 0, 0)), original_points)
        cv2.imshow('image', self.img)
        cv2.waitKey(0)
        cv2.destroyAllWindows()

    def test_initialize_warper(self):
        height, width, channels = self.img.shape
        self.new_image = np.zeros((height, width, channels), np.uint8)
        warper = ImgWarper(self.img)
        self.show_image(warper.img)

    def test_warp(self):
        original_points, dest_points = self.get_points()
        self.new_image = ImgWarper(self.img).warp(original_points, dest_points)
        cv2.imshow('original_image', self.img)
        self.show_image(self.new_image, 'warped_image')
        self.assertIsNone(self.new_image)

    def test_make_grid(self):
        original_points, dst_points = self.get_points()
        self.assertIsNone(ImgWarper(self.img).grid)

    def show_image(self, img, window_name):
        cv2.imshow(window_name, img)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
        self.assertEqual(type(self.new_image), type(self.img))

    def get_points(self):
        original_points = []
        dest_points = []
        num_or_pairs = len(OPENFACE_OUTPUTS) / 2
        for i in range(num_or_pairs):
            original_points.append(Point(int(OPENFACE_OUTPUTS[i]), int(OPENFACE_OUTPUTS[i + num_or_pairs])))
            dest_points.append(Point(int(DESTINATIONS[i]), int(DESTINATIONS[i + num_or_pairs])))
        return original_points, dest_points

    def test_test(self):
        a = [4.969141630474752e-06, 5.601456378658451e-06, 6.435461969637491e-06, 7.481166164181673e-06, 8.875004437502219e-06, 1.0841283607979185e-05, 1.3431833445265279e-05, 1.666861133798943e-05, 2.040441551551756e-05, 2.3768212392745942e-05, 2.4417639302632222e-05, 2.282583884957772e-05, 1.942011535548521e-05, 1.584359205919166e-05, 1.2623074981065388e-05, 1.0317255610007738e-05, 8.510203734277399e-06, 4.756785554593628e-06, 4.765331262002678e-06, 4.926642296209441e-06, 5.248875428439457e-06, 5.641653455794824e-06, 6.159304244992486e-06, 6.135195160558057e-06, 6.236513539470894e-06, 6.461116997906598e-06, 6.933610677760444e-06, 6.682169299441371e-06, 7.3249340755933195e-06, 8.011215701982776e-06, 8.828540907044293e-06, 8.997660608241856e-06, 9.523356030665206e-06, 1.0086339062373921e-05, 1.0338054378166029e-05, 1.0501995379122034e-05, 5.669191346546328e-06, 5.486396479928019e-06, 5.726458528987333e-06, 6.393984539345384e-06, 6.261113476420647e-06, 6.001176230541186e-06, 7.398967104192254e-06, 7.279185895849408e-06, 7.501143924448478e-06, 7.920792079207921e-06, 7.999424041469014e-06, 7.762468464971862e-06, 9.95530069985764e-06, 1.0350252546162127e-05, 1.0836936614757741e-05, 1.159164937578968e-05, 1.2017786323759164e-05, 1.3076510663894446e-05, 1.4509365795621073e-05, 1.4832833961256638e-05, 1.4280818005255341e-05, 1.351625329458674e-05, 1.2668330440731216e-05, 1.143000834390609e-05, 1.0347253838831174e-05, 1.1568049048527965e-05, 1.22040517451794e-05, 1.2759984688018374e-05, 1.4213832902180401e-05, 1.2943978461219841e-05, 1.2367360063320883e-05, 1.1648223645894e-05]
        b = [0.000004969141630474752, 0.000005601456378658451, 0.000006435461969637491, 0.000007481166164181673, 0.000008875004437502219, 0.000010841283607979185, 0.000013431833445265279, 0.00001666861133798943, 0.00002040441551551756, 0.000023768212392745942, 0.000024417639302632222, 0.00002282583884957772, 0.00001942011535548521, 0.00001584359205919166, 0.000012623074981065388, 0.000010317255610007738, 0.000008510203734277399, 0.000004756785554593628, 0.000004765331262002678, 0.000004926642296209441, 0.000005248875428439457, 0.000005641653455794824, 0.000006159304244992486, 0.000006135195160558057, 0.000006236513539470894, 0.000006461116997906598, 0.000006933610677760444, 0.000006682169299441371, 0.0000073249340755933195, 0.000008011215701982776, 0.000008828540907044293, 0.000008997660608241856, 0.000009523356030665206, 0.000010086339062373921, 0.000010338054378166029, 0.000010501995379122034, 0.000005669191346546328, 0.000005269564575879095, 0.0000054918500944598215, 0.000006393984539345384, 0.000006261113476420647, 0.000006001176230541186, 0.000007398967104192254, 0.000007279185895849408, 0.000007501143924448478, 0.000007920792079207921, 0.000007999424041469014, 0.000007762468464971862, 0.00000995530069985764, 0.000010350252546162127, 0.000010836936614757741, 0.00001159164937578968, 0.000012017786323759164, 0.000013076510663894446, 0.000014509365795621073, 0.000014832833961256638, 0.000014280818005255341, 0.00001351625329458674, 0.000012668330440731216, 0.00001143000834390609, 0.000010347253838831174, 0.000011568049048527965, 0.0000122040517451794, 0.000012759984688018374, 0.000014213832902180401, 0.000012943978461219841, 0.000012367360063320883, 0.000011648223645894]
        self.assertEqual(a, b)
